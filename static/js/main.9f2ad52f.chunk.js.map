{"version":3,"sources":["utils/helpers.js","components/generic/Card/Card.js","components/generic/Display/Display.js","components/generic/Input/Input.js","components/generic/Button/Button.js","components/generic/Timer.js","hooks/useTimer.js","hooks/timerhooks.js","components/timers/Stopwatch.js","components/timers/Countdown.js","components/timers/XY.js","components/timers/Tabata.js","platform/WorkoutSettingsProvider.js","platform/SettingsProvider.js","platform/TimerProvider.js","components/generic/Container/Container.js","components/documentation/DocumentComponent.js","components/generic/Tabs/Tabs.js","components/generic/Panel/Panel.js","views/DocumentationView.js","views/TimersView.js","views/AddView.js","App.js","index.js"],"names":["formatTime","timer","seconds","slice","fetchedMinutes","Math","floor","minutes","hours","T_STOPWATCH","T_COUNTDOWN","T_TABATA","T_XY","WORK_MODE","REST_MODE","TIMER_SETTINGS","timers","Card","memo","props","side","children","cardStyle","className","Display","useContext","TimerContext","counter","timerCounting","statusMessage","setStatusMessage","messenger","isComplete","setCounter","startTime","selectedTimer","successStyle","toLowerCase","useEffect","utils","Input","label","placeholder","inputAttributes","useState","value","setValue","onChange","e","target","Button","buttonTheme","id","isIconButton","iconName","classifiers","iconVisible","buttonAttributes","buttonStyle","iconVisibility","class","name","CONFIG","configurations","Timer","context","toggleCounting","toggleSide","completeTimer","setSettings","resetWorkout","workouts","getWorkout","updateWorkout","currentWorkout","currentWorkoutId","deleteWorkout","settings","schema","playButtonStyle","flipSide","card","document","querySelector","classList","toggle","onClick","map","setting","index","type","min","max","inputSettings","forEach","input","parseInt","workout","console","log","useTimer","timerSettings","key","JSON","parse","localStorage","getItem","loadFromStorage","exitTimer","useTimerInitializer","startTimer","isTimerOver","pauseTimer","nextWorkout","setTimerCounting","hasNext","runningTimer","useRef","runningDelay","current","setTimeout","clearTimeout","useTimerStarter","StopWatch","Countdown","XY","Tabata","WorkoutSettingsContext","React","createContext","WORKOUTS","title","C","Stopwatch","WorkoutSettingsProvider","setWorkouts","setCurrentWorkout","getWorkoutProperty","property","isEmpty","componentizeWorkout","length","Provider","calculateTotalWorkout","reduce","total","stopTime","totalRounds","restStartTime","abs","createWorkout","retrieveWorkout","find","updatedWorkout","updatedWorkouts","w","filter","position","getWorkoutPosition","findIndex","SettingsContext","SettingsProvider","workoutContext","setSelectedTimer","setStartTime","setStopTime","setTotalRounds","setRestStartTime","useCallback","newStartTime","isPersistent","setItem","stringify","isValid","mode","isNaN","persistence","getSettings","TimerProvider","settingsContext","currentRound","setCurrentRound","setMode","isFrontSide","setIsFrontSide","setToComplete","restRound","setRestRound","startCounting","resetTimer","resetMode","setInterval","interval","clearInterval","initializeTimer","duration","refTime","elapsed","includes","Container","Section","styled","div","Article","Title","RenderComponent","Documentation","table","DocumentComponent","component","propDocs","doc","prop","description","defaultValue","Tabs","tabItems","tabSelected","tabStyle","handleChange","tabItem","checked","htmlFor","Panel","flip","TimersView","src","process","alt","window","location","href","AddView","App","to","path","DocumentationView","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9f2ad52f.chunk.js","sourcesContent":["// Add helpers here. This is usually code that is just JS and not React code. Example: write a function that\n// calculates number of minutes when passed in seconds. Things of this nature that you don't want to copy/paste\n// everywhere.\nimport timers from '../utils/timers.json';\n\n\n// read from a collection of timers\nexport const readCollection = (arr, keyName) => {\n    return arr.map((item) => {\n        return item[keyName];\n    });\n}\n\n\n// Fetch timer info from collection of timers\nexport const getTimer = (timerName, arr) =>  {\n    function isTimer(timer) {\n        return timer.type === timerName;\n    }\n    return arr.find((isTimer)).C;\n}\n\n// match a property in a setting JSON\nconst isMatch = (setting, value) => {\n    return setting.id === value; \n}\n\n\n// Get a property from a setting JSON\nexport const getSetting = (value, settings) => {\n    const match = settings.find((setting) => isMatch(setting, value));\n    return match.value;\n}\n\n\n// Format time to string\nexport const formatTime = (timer) => {\n    const seconds = `0${(timer % 60)}`.slice(-2)\n    const fetchedMinutes = `${Math.floor(timer / 60)}`\n    const minutes = `0${fetchedMinutes % 60}`.slice(-2)\n    const hours = `0${Math.floor(timer / 3600)}`.slice(-2)\n  \n    return `${hours}:${minutes}:${seconds}`\n}\n\n\n// Load from storage\nexport const loadFromStorage = (key) => {\n    try {\n        return JSON.parse(localStorage.getItem(key));\n    } catch(e) {\n        return false;\n    }\n}\n\n// Save settings to storage\nexport const saveToStorage  = (key, value)  => {\n    localStorage.setItem(key, JSON.stringify(value));\n}\n\n\n// Timer types\nexport const T_STOPWATCH = \"Stopwatch\";\nexport const T_COUNTDOWN = \"Countdown\";\nexport const T_TABATA = \"Tabata\";\nexport const T_XY = \"XY\";\nexport const WORK_MODE = \"Work\";\nexport const REST_MODE = \"Rest\";\n\n// Timer settings from json\nexport const TIMER_SETTINGS = timers;","import { memo } from 'react';\nimport './Card.css';\nimport className from 'classnames';\nimport PropTypes from 'prop-types';\n\nconst Card =  memo((props) => {\n    const { side =\"front\", children } = props;\n\n    const cardStyle = [{\n        [`panel_face_${side}`]: side? true : false\n    }];\n\n    return (\n        <div className={className(cardStyle)}>\n            { children }\n        </div>\n    );\n});\n\nCard.propTypes = {\n    side: PropTypes.string,\n    children: PropTypes.node\n}\n\nexport default Card;","import  { memo, useContext, useEffect } from 'react';\nimport './Display.css';\nimport PropTypes from 'prop-types';\nimport {  TimerContext } from '../../../platform/TimerProvider';\nimport * as utils from \"../../../utils/helpers\";\nimport className from 'classnames';\n\nconst Display = memo(() => {\n    const { counter, timerCounting,  statusMessage, setStatusMessage, \n        messenger, isComplete, setCounter, startTime, selectedTimer } = useContext(TimerContext);\n\n    const successStyle = [{\n        [`${selectedTimer.toLowerCase()}`]: !isComplete, \n        \"success\": isComplete\n    }];\n\n    useEffect(() => {\n        setCounter(startTime);\n    }, [setCounter, startTime])\n\n    useEffect(() => {\n        setStatusMessage(messenger());\n    }, [setStatusMessage, messenger]);\n\t\t\n    return (\n\n        // Return is stylized circular display\n        <div className=\"display_circular\">\n            <div className=\"marker\">\n                { statusMessage && <p className={className(\"header\", successStyle)}>{ statusMessage }</p>}\n                {!isComplete && <p className={className(\"value neonText\", successStyle)}>{ utils.formatTime(counter) }</p>}\n                {isComplete && <p className={className(\"value neonText\", successStyle)}>Nice!</p>}\n            </div>\n        \n            { \n                // Animate if timer is on\n                !!timerCounting && \n                    <>\n                        <div className=\"display_circular_back-1\"></div>\n                        <div className=\"display_circular_back-2\"></div>\n                    </>\n            }\n        </div>\n\n    );\n});\n\n\nDisplay.propTypes = {\n\ttimerCounting: PropTypes.bool,\n    statusMessage: PropTypes.string,\n    counter: PropTypes.string\n}\n\n\nexport default Display;\n","import { memo, useState, useEffect } from 'react';\nimport './Input.css';\nimport PropTypes from 'prop-types';\n\nconst Input = memo((props) => {\n\n    const { label, placeholder, ...inputAttributes } = props;\n    const [value, setValue] = useState(props.value);\n\n\n    // Update the context with the new prop value\n    useEffect(() => {\n        setValue(props.value);\n    }, [setValue, props.value]);\n    \n\n    const handleChange = (e) => {\n        setValue(e.target.value);\n        if (props.onChange) props.onChange(e);\n    }\n\n    return (\n        <>\n        {label && \n            <fieldset>\n                <label className=\"settings-label\" >{label}</label>\n                <input  {...inputAttributes} value={value} placeholder={placeholder} onChange={handleChange} />\n            </fieldset>\n        }\n        </>\n    );\n\n});\n\nInput.propTypes = {\n    label: PropTypes.string,\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.instanceOf(Date)]),\n    placeholder: PropTypes.string,\n}\n\nexport default Input;","import { memo } from 'react';\nimport './Button.css';\nimport className from 'classnames';\nimport PropTypes from 'prop-types';\nimport { T_STOPWATCH } from '../../../utils/helpers';\n\nconst Button =  memo(({ buttonTheme  = T_STOPWATCH, ...props }) => {\n\n    const { \n        id,\n        value = \"\",\n        isIconButton = false, \n        iconName = \"\", \n        classifiers = \"btn_primary\", \n        iconVisible = true,\n        children, \n        ...buttonAttributes} = props; \n\n\n    const buttonStyle = [{\n        \"icon_btn\": isIconButton,\n        [`icon_btn_${buttonTheme.toLowerCase()}`]: true,\n        \"btn\": !isIconButton,\n        [`btn_primary_${buttonTheme.toLowerCase()}`]: true\n    }];\n\n    const iconVisibility = [{\n        \"show\": iconVisible,\n        \"hide\": !iconVisible\n    }];\n\n    return (   \n\n        // Returns a stylized text or icon button\n        <div id={id} value={value} className={className(buttonStyle, classifiers)} { ...buttonAttributes} >\n            { isIconButton && \n                <ion-icon value={value} class={className(iconVisibility)} name={iconName}></ion-icon>\n            }\n            {!isIconButton && children}\n        </div>\n    );\n\n});\n\nButton.propTypes = {\n    id: PropTypes.string,\n    value: PropTypes.string,\n    isIconButton:  PropTypes.bool,\n    iconName: PropTypes.string,\n    classifiers: PropTypes.string,\n    iconVisible: PropTypes.bool,\n\tonClick: PropTypes.func.isRequired,\n    buttonTheme: PropTypes.string\n}\n\nexport default Button;\n","import { useContext  } from 'react';\nimport {  TimerContext } from '../../platform/TimerProvider';\nimport { TIMER_SETTINGS } from '../../utils/helpers';\nimport PropTypes from 'prop-types';\nimport Card from \"./Card/Card\";\nimport Display from \"./Display/Display\";\nimport Input from \"./Input/Input\";\nimport Button  from \"./Button/Button\";\nimport className from 'classnames';\n\nconst CONFIG = TIMER_SETTINGS.configurations;\n\nconst Timer = () => {\n\n  const { ...context } = useContext(TimerContext);\n  const { timerCounting, toggleCounting, toggleSide, completeTimer, selectedTimer, isComplete, setSettings, \n    resetWorkout, workouts, getWorkout, updateWorkout, currentWorkout, currentWorkoutId, deleteWorkout } = context;\n  const settings = TIMER_SETTINGS.schema[selectedTimer];\n\n  // play button style\n  const playButtonStyle = [{\n    \"primary\": true,\n    \"disabled\": isComplete\n  }];\n\n\n  // Flips the card to display settings\n  const flipSide = () => {\n      toggleSide();\n      const card = document.querySelector(\"#timer_panel\");\n      if (card) card.classList.toggle('is-flipped');\n  }\n\n  // Save settings  to context\n  const saveSettings  = () => {\n    const inputSettings = {};\n    settings.forEach((setting) => {\n      const input = document.querySelector(`#${setting.id}`)?.value;\n      inputSettings[setting.id] = parseInt(input) || 0;\n\n    });\n    // save the settings to the context\n    setSettings(inputSettings);\n\n    // save settings in workouts\n    const workout = getWorkout(currentWorkout);\n    if (workout) {\n        workout.settings = inputSettings;\n        updateWorkout(workout);\n        console.log(workouts);\n    }\n    flipSide();\n  }\n\n\n  const handleDelete  =  () =>  {\n    const id = currentWorkoutId();\n    deleteWorkout({\"id\": id});\n    flipSide();\n  }\n\n  return (\n    <>\n      <Card side=\"front\">\n        <Display  />\n\n        <div className=\"btn_bar\">\n            {timerCounting ? (\n                  <Button \n                      id = \"pause_btn\"\n                      value=\"pause\"\n                      classifiers=\"primary\"\n                      isIconButton={true} \n                      onClick={toggleCounting} \n                      iconName=\"pause\"\n                      buttonTheme={selectedTimer}\n                  />\n            ) : (\n\n                  <Button \n                      id = \"start_btn\"\n                      value=\"start\"\n                      classifiers={className(playButtonStyle)}\n                      isIconButton={true} \n                      onClick={toggleCounting} \n                      iconName=\"play\"\n                      buttonTheme={selectedTimer}\n                  />\n            \n            )}\n\n            {timerCounting ? (\n              <Button \n              id = \"complete\"\n              value=\"complete\"\n              classifiers = \"primary\"\n              isIconButton = {true}\n              onClick={completeTimer}\n              iconName=\"play-forward-outline\"\n              buttonTheme={selectedTimer}\n            />\n            \n            )\n            :  (\n              <Button \n                id = \"reset_btn\"\n                value=\"reset\"\n                classifiers = \"primary\"\n                isIconButton = {true}\n                onClick={resetWorkout}\n                iconName=\"refresh-outline\"\n                buttonTheme={selectedTimer}\n              />\n            )}\n          \n            {settings && <Button \n              id = \"settings_btn\"\n              value=\"settings\"\n              classifiers = \"secondary\"\n              isIconButton = {true}\n              onClick={flipSide}\n              iconName=\"settings\"\n              buttonTheme={selectedTimer}\n            />}\n        </div>\n      </Card>\n      <Card side=\"back\">\n            <h1>Settings</h1>\n            {settings && \n              <div className=\"settings-form\" id=\"inputs\">\n                  {settings.map((setting, index) => \n                      <Input  key={index}\n                              label={setting.label} \n                              type=\"number\"\n                              placeholder={`Between ${CONFIG[setting.type]?.min} and ${CONFIG[setting.type]?.max}`} \n                              value={context[setting.id]}\n                              id={setting.id}\n                      />\n                      )\n                  }\n              </div>\n              }\n            <div className=\"btn_bar\">\n              <Button \n                  id = \"back_btn\"\n                  value=\"back\"\n                  isIconButton = {true}\n                  onClick={flipSide}\n                  iconName=\"arrow-back-outline\"\n                  buttonTheme={selectedTimer}\n              />\n              <Button \n              onClick={saveSettings}\n              buttonTheme={selectedTimer}>\n                Save\n              </Button>\n              <Button \n                  id = \"delete_btn\"\n                  value=\"delete\"\n                  isIconButton = {true}\n                  onClick={handleDelete}\n                  iconName=\"trash-outline\"\n                  buttonTheme={selectedTimer}\n              />\n            </div>\n      </Card>\n    </>\n  );\n\n\n  \n}\n\nTimer.propTypes = {\n  settings: PropTypes.object,\n}\n\nexport default Timer;\n","import { useContext, useState } from 'react';\nimport {  TimerContext } from '../platform/TimerProvider'; \nimport { useTimerStarter, useTimerInitializer  } from './timerhooks';\nimport { TIMER_SETTINGS, loadFromStorage } from '../utils/helpers';\n\nexport const useTimer = (settings) => {\n\n    const { ...context } = useContext(TimerContext);\n    const { selectedTimer } = context;\n    const timerSettings = settings.settings;\n    \n    /* Load from browser local storage if available. \n     * Otherwise, load from provided prop settings. \n     * In any case, default from timers.json\n     */\n    const [inputSettings] = useState(loadFromStorage(selectedTimer) || timerSettings || TIMER_SETTINGS.settings[selectedTimer]);\n\n    useTimerInitializer(inputSettings, context);\n\n    useTimerStarter(context);\n\n}","import { useEffect, useRef } from 'react';\n\n\n// Hook used to start the timers\nexport const useTimerStarter = (context) => {\n  \n  const {timerCounting, startTimer, isTimerOver, pauseTimer, completeTimer, nextWorkout, setTimerCounting, hasNext} = context;\n  const runningTimer = useRef();\n  const runningDelay = useRef();\n\n  useEffect(() => {\n    if (timerCounting && !isTimerOver()) runningTimer.current = startTimer()\n    else if (isTimerOver()) runningDelay.current = setTimeout(hasNext()? nextWorkout : completeTimer(runningTimer.current), 1000);\n    else pauseTimer(runningTimer.current); \n    return () => {\n      pauseTimer(runningTimer.current);\n      clearTimeout(runningDelay.current);\n    }\n  }, [timerCounting, startTimer, isTimerOver, pauseTimer, completeTimer, setTimerCounting, nextWorkout, hasNext]);\n\n  return  runningTimer.current;\n\n};\n\n//Hook use to initialize timers\nexport const useTimerInitializer = (inputSettings, context) => {\n\n  const {setSettings, exitTimer } = context; \n\n  useEffect(() => {\n    \n    setSettings(inputSettings);\n\n    // on exit reinitialize to input settings\n    return () => exitTimer();\n    \n\n  }, [setSettings, exitTimer, inputSettings]);  \n}","import Timer from \"../generic/Timer\";\nimport { useTimer } from \"../../hooks/useTimer\";\nimport PropTypes from 'prop-types';\n\nconst StopWatch = (settings)  =>  {\n\n  /* \n   * Object for each type of timer for potential \n   * parallel running down the road\n  */\n\n  // Hook for the timer\n  useTimer(settings);\n\n  // Render the generic timer\n  return <Timer />\n\n}\n\nStopWatch.propTypes = {\n  settings: PropTypes.object,\n}\n\nexport default StopWatch;\n","import Timer from \"../generic/Timer\";\nimport { useTimer } from \"../../hooks/useTimer\";\nimport PropTypes from 'prop-types';\n\nconst Countdown = (settings) => {\n\n  /* \n   * Object for each type of timer for potential \n   * parallel running down the road\n  */\n\n  // Hook for the timer\n  useTimer(settings);\n\n  // Render the generic timer\n  return <Timer />\n  \n}\n\nCountdown.propTypes = {\n  settings: PropTypes.object,\n}\n\nexport default Countdown;\n","import Timer from \"../generic/Timer\";\nimport { useTimer } from '../../hooks/useTimer';\nimport PropTypes from 'prop-types';\n\nconst XY = (settings) => {\n\n  /* \n   * Object for each type of timer for potential \n   * parallel running down the road\n  */\n\n  // Hook for the timer\n  useTimer(settings);\n\n  // Render the generic timer\n  return <Timer />\n\n}\n\nXY.propTypes = {\n  settings: PropTypes.object,\n}\n\nexport default XY;","import Timer from \"../generic/Timer\";\nimport { useTimer } from '../../hooks/useTimer';\nimport PropTypes from 'prop-types';\n\nconst Tabata = (settings)  => {\n  \n  /* \n   * Object for each type of timer for potential \n   * parallel running down the road\n  */\n\n  // Hook for the timer\n  useTimer(settings);\n\n  // Render the generic timer\n  return <Timer />\n  \n}\n\nTabata.propTypes = {\n  settings: PropTypes.object,\n}\n\nexport default Tabata;","import React, { useState } from 'react';\nimport Stopwatch from \"../components/timers/Stopwatch\";\nimport Countdown from \"../components/timers/Countdown\";\nimport XY from \"../components/timers/XY\";\nimport Tabata from \"../components/timers/Tabata\";\nimport { T_STOPWATCH, T_COUNTDOWN, T_XY, T_TABATA } from '../utils/helpers';\n\nexport const WorkoutSettingsContext = React.createContext({});\n\n\nconst WORKOUTS = [\n    { id: 0, title: \"workout 1\", type: T_STOPWATCH, settings: {\"startTime\": 0,\"stopTime\": 2}, C: <Stopwatch  key={0} settings={{\"startTime\": 0,\"stopTime\": 2}} /> },\n    { id: 1, title: \"workout 2\", type: T_STOPWATCH, settings: {\"startTime\": 0,\"stopTime\": 3} , C: <Stopwatch  key={1} settings={{\"startTime\": 0,\"stopTime\": 3}} /> },\n    // { id: 2, title: \"workout 3\", type: T_COUNTDOWN, settings: {\"startTime\": 10,\"stopTime\": 0},  C: <Countdown  key={2} settings={{\"startTime\": 10,\"stopTime\": 0}} /> },\n    // { id: 3, title: \"workout 4\", type: T_XY, settings: {\"startTime\": 10,\"totalRounds\": 2}, C: <XY key={3} settings={{\"startTime\": 10,\"totalRounds\": 2}}/> },\n    // { id: 4, title: \"workout 5\", type: T_TABATA, settings: {\"startTime\": 10,\"restStartTime\": 5,\"totalRounds\": 5}, C: <Tabata key={4} settings={{\"startTime\": 10,\"restStartTime\": 5,\"totalRounds\": 5}}/> }\n  ];\n\nexport const WorkoutSettingsProvider = ({ children }) => {\n\n    const [ workouts, setWorkouts ] = useState(WORKOUTS);\n    const [ currentWorkout, setCurrentWorkout ]  = useState(0);\n\n\n    // CRUD: Create workout\n    const createWorkout  = (title, type, settings) => {\n        const id = workouts.length;\n        setWorkouts([...workouts, {\n            id, \n            title,\n            type, \n            \"C\": componentizeWorkout(type, settings)\n        }]);\n        return id;\n    }\n\n    // CRUD: Retrieve workout\n    const retrieveWorkout = ({ id }) => workouts.find(workout => `${workout.id}` === `${id}`);\n\n    // CRUD: Update workout\n    const updateWorkout =  workout => {\n        const C = componentizeWorkout(workout.id, workout.type, workout.settings);\n        const updatedWorkout =  {...workout, \"C\": C};\n        const updatedWorkouts = workouts.map(w => (w.id === workout.id ? updatedWorkout : w));\n        setWorkouts(updatedWorkouts);\n    }\n\n    // CRUD: Delete workout\n    const deleteWorkout = ({ id }) => {\n        const updatedWorkouts = workouts.filter(w => w.id !== id);\n        setWorkouts(updatedWorkouts);\n    }\n\n    // Get workout based on position\n    const getWorkout = (position) => !isEmpty() && hasNext()? workouts[position] : null;\n\n    // Get workout position\n    const getWorkoutPosition = ({ id }) => workouts.findIndex(workout => `${workout.id}` === `${id}`);\n\n    // Get Workout Property\n    const getWorkoutProperty = (index, property) => !isEmpty()? workouts[index][property] : null;\n    \n    const currentWorkoutId = () => getWorkoutProperty(currentWorkout, 'id');\n\n    // Componentize the workout\n    const componentizeWorkout =  (id, type, settings) => {\n        switch(type) {\n            case T_COUNTDOWN:\n                return <Countdown settings={settings} key={id} />\n            case T_XY:\n                return <XY settings={settings} key={id} />\n            case T_TABATA:\n                return <Tabata settings={settings} key={id} />\n            default:\n                return <Stopwatch settings={settings} key={id} />\n        } \n    }\n\n    // Check if workout is empty\n    const isEmpty = () => workouts.length ===  0;\n\n    // Checks if current workout is  within workouts\n    const hasNext = () => currentWorkout < workouts.length;\n\n\n    // Get the next workout\n    const nextWorkout = () => {\n        if (hasNext())\n            setCurrentWorkout(currentWorkout + 1);\n    }\n\n    // Reset Workout\n    const resetWorkout = () => {\n        setCurrentWorkout(0);\n    }\n\n    const calculateTotalWorkout = () => {\n\n        // Compute total workout\n        const totalWorkout = (total, workout) => {\n            let { startTime = 0, stopTime = 0, totalRounds = 1, restStartTime = 0} = workout.settings;\n            let duration = Math.abs((startTime - stopTime) + restStartTime) * totalRounds; \n            return total + duration;\n        }\n\n        return !isEmpty() ? WORKOUTS.reduce(totalWorkout, 0) : 0;\n    }\n\n    return <WorkoutSettingsContext.Provider \n            value={{ \n                workouts, setWorkouts, hasNext, isEmpty,\n                currentWorkout, setCurrentWorkout, nextWorkout, \n                resetWorkout, calculateTotalWorkout,\n                createWorkout, retrieveWorkout, updateWorkout, deleteWorkout, \n                componentizeWorkout, getWorkout, getWorkoutPosition, getWorkoutProperty, currentWorkoutId\n            }}>\n            {children}\n        </WorkoutSettingsContext.Provider>;\n}\n\nexport default WorkoutSettingsProvider;","import React, { useState, useCallback,  useContext } from 'react';\nimport { TIMER_SETTINGS, T_STOPWATCH, T_COUNTDOWN, saveToStorage } from '../utils/helpers';\nimport { WorkoutSettingsContext } from './WorkoutSettingsProvider';\n\n\nexport const SettingsContext = React.createContext({});\n\n\nexport const SettingsProvider = ({ children }) => {\n\n    // Fetch content from the workout\n    const { ...workoutContext } = useContext(WorkoutSettingsContext);\n    const { workouts } =  workoutContext; \n\n    const [selectedTimer, setSelectedTimer]  = useState(workouts[0]?.type);\n    const [startTime, setStartTime] = useState(0);\n    const [stopTime, setStopTime] = useState(0);\n    const [totalRounds, setTotalRounds] = useState(0);\n    const [restStartTime, setRestStartTime] = useState(0);\n\n\n\n    // Getter that wraps all the settings in one object\n    const getSettings = () => {\n        if (startTime === 0 && stopTime === 0  && totalRounds === 0 && restStartTime === 0)\n            return  null;\n        else\n            return {startTime, stopTime, totalRounds, restStartTime};\n    }\n\n    // Setter that sets all the settings in one call\n    const setSettings = useCallback((settings) =>  {\n\n        // Switch start and end if order not respected\n        let newStartTime = settings.startTime;\n        if ((selectedTimer === T_STOPWATCH && settings.startTime > settings.stopTime)\n            || (selectedTimer === T_COUNTDOWN && settings.startTime < settings.stopTime)) {\n            newStartTime = settings.startTime;\n            settings.startTime = settings.stopTime;\n            settings.stopTime = newStartTime;\n        } \n\n        // save if persistent is turned on\n        if (isPersistent()) saveToStorage(selectedTimer, settings);\n\n        // Set the settings\n        setStartTime(settings.startTime && isValid(settings.startTime)? parseInt(settings.startTime): 0);\n        setStopTime(settings.stopTime && isValid(settings.stopTime)? parseInt(settings.stopTime): 0);\n        setTotalRounds(settings.totalRounds && isValid(settings.totalRounds, \"rounds\")? parseInt(settings.totalRounds):  1);\n        setRestStartTime(settings.restStartTime && isValid(settings.restStartTime) ? parseInt(settings.restStartTime): 0);\n\n\n    }, [selectedTimer])\n\n\n    // Checks if input is valid based on expected configurations in timer.json\n    const isValid =  (value, mode = \"time\") =>  value && !isNaN(value) && value <= TIMER_SETTINGS.configurations[mode].max && value >= TIMER_SETTINGS.configurations[mode].min;\n\n    \n    // Checks if persistence is turned on in the configurations\n    const isPersistent = () => TIMER_SETTINGS.configurations.persistence;\n\n\n    return <SettingsContext.Provider \n            value={{ \n                selectedTimer, setSelectedTimer,\n                startTime, setStartTime,\n                stopTime, setStopTime,\n                totalRounds, setTotalRounds,\n                restStartTime, setRestStartTime,\n                getSettings, setSettings, isPersistent,\n                ...workoutContext\n            }}>\n            {children}\n        </SettingsContext.Provider>;\n};\n\nexport default SettingsProvider;","import React, { useState, useContext, useCallback } from 'react';\nimport { T_STOPWATCH, T_COUNTDOWN, T_XY, T_TABATA, WORK_MODE, REST_MODE, formatTime } from '../utils/helpers';\nimport { SettingsContext } from './SettingsProvider';\n\nexport const TimerContext = React.createContext({});\n\nexport const TimerProvider = ({ children }) => {\n\n    // Fetch content from Settings Provider\n    const { ...settingsContext } = useContext(SettingsContext);\n\n    const { \n        selectedTimer,\n        startTime,\n        stopTime,\n        restStartTime,\n        totalRounds, setSettings, hasNext\n     } = settingsContext;\n\n    const [statusMessage, setStatusMessage] = useState(\"\");\n    const [timerCounting, setTimerCounting] =  useState(false);\n    const [counter, setCounter] = useState(startTime);\n    const [currentRound, setCurrentRound] = useState(1);\n    const [mode, setMode] = useState(WORK_MODE);\n    const [isFrontSide, setIsFrontSide] = useState(true);\n    const [isComplete, setToComplete] = useState(false);\n\n    const [restRound, setRestRound] = useState(1);\n\n\n    // Start the timer\n    const startTimer = () => {\n        setToComplete(false);\n        \n        // counting up\n        if (T_STOPWATCH) \n            return setInterval(() => {\n                startCounting();\n            }, 1000);\n\n        // counting down can be done with timeout\n        else \n            return setTimeout(() => {\n                startCounting();\n            }, startTime)\n    }\n\n        // private function: start the counter\n        const startCounting =  () => {\n            switch(selectedTimer) {\n                case T_STOPWATCH:\n                    setCounter((counter) => counter + 1);\n                    break;\n                case T_TABATA:\n                    setCounter((counter) => counter - 1);\n                    if (counter === 0 && mode === REST_MODE) {\n                        setMode(WORK_MODE);\n                        setCounter(startTime);\n                        setCurrentRound(currentRound + 1);\n                    } else if (counter === 0 && mode === WORK_MODE) {\n                        setMode(REST_MODE);\n                        setCounter(restStartTime);\n                        setRestRound(restRound + 1);\n                    }\n                    break;\n                default:\n                    // /CountDown and XY have the same principles\n                    setCounter((counter) => counter - 1);\n                    if (counter === 0) {\n                        resetTimer(false);\n                        setCurrentRound((currentRound) => currentRound + 1);\n                    }\n    \n            }\n        }\n\n    // Pause the timer\n    const pauseTimer = (interval) => {\n        clearInterval(interval);\n        clearTimeout(interval);\n    }\n\n    // Reset the timer: keeps the timer runner\n    // but reinitializes the counter\n    const resetTimer = (resetMode = true) => {\n        \n        setCounter(mode === WORK_MODE? startTime : restStartTime);\n\n        if (!!resetMode) {\n            setMode(WORK_MODE); \n            setToComplete(false);\n            setTimerCounting(false);\n            setCurrentRound(1);\n            setRestRound(0);\n        }\n    }\n\n\n    // Initializes the timer\n    const initializeTimer = (settings) => {\n        setSettings(settings);\n        setCounter(mode === WORK_MODE? startTime : restStartTime);\n        if (selectedTimer !== T_TABATA) {\n            setCounter(mode === WORK_MODE? startTime : restStartTime);\n            setMode(WORK_MODE); \n            setToComplete(false);\n            setTimerCounting(false);\n            setCurrentRound(1);\n            setRestRound(0);\n        }\n    }\n\n    // Resets all the timer controls upon  exit\n    const exitTimer = useCallback(() => {\n        // setTimerCounting(false);\n        setToComplete(false);\n        setCurrentRound(1);\n    }, []);\n\n    // End the timer\n    const completeTimer = (interval) => {\n        clearInterval(interval);\n        clearTimeout(interval);\n        if (!hasNext())\n            toggleCounting();\n        setCounter(stopTime);\n        setCurrentRound(totalRounds);\n        setRestRound(totalRounds);\n        setMode(WORK_MODE);\n        setToComplete(true);\n        return true;\n    }\n\n    // Toggle timer on, off\n    const toggleCounting  = () => {\n        setTimerCounting(!timerCounting);\n    }\n\n    // Toggle between timer and settings card\n    const toggleSide = () => {\n        if (!isFrontSide) resetTimer();\n        setIsFrontSide(!isFrontSide);\n    }\n\n\n    // Check if the timer completed\n    const isTimerOver = () =>  {\n        \n        // countdown\n        if (startTime >= stopTime) \n            return  timerCounting && counter <= stopTime && currentRound === totalRounds  \n            && (selectedTimer === T_TABATA? restRound === totalRounds : true);\n        \n        // countup\n        else\n            return  timerCounting && counter >= stopTime && currentRound === totalRounds;\n    }\n\n    // Conversation handler\n    const messenger = () => {\n\n        // Use duration and elapsed time to control messaging\n        const duration = mode === WORK_MODE? Math.abs(startTime - stopTime) : Math.abs(restStartTime - stopTime) ;\n        const refTime = mode === WORK_MODE? startTime : restStartTime;\n        const elapsed = duration !== 0? Math.abs(counter-refTime)/duration : 1;\n\n        // Generic Beginning and Ending Messages\n        if (mode === REST_MODE && (counter === startTime + 1 || counter === startTime - 1)) return \"Breathe...\";\n        if (mode === WORK_MODE && (counter === startTime + 1 || counter === startTime - 1)) return \"Let's move that body!\";\n        if (isComplete)  return \"You made it! Again?\";  \n\n        // Breathing messages\n        if (!timerCounting && counter !== startTime && counter !== stopTime ) return \"Let's take a breath...\";\n        if (mode === REST_MODE && restRound === totalRounds && duration >=5 && elapsed >= 0.8) return  \"Almost done!\";\n        if (mode === REST_MODE && duration >=5 && elapsed >= 0.8) return  \"We're about to start again\";\n        if (mode === REST_MODE && duration >=5 && elapsed >= 0.6 ) return  \"Take a deep breath\";\n\n\n        // Goal reaching messages\n        if (duration >= 10 && elapsed >= 0.8 ) return \"Your goal is near...\";\n        if (duration >= 10 && elapsed >= 0.6 ) return \"Keep moving\";\n\n        // Main messages\n        if (selectedTimer === T_XY) return `Round ${currentRound} of ${totalRounds}`;\n        if ([T_STOPWATCH, T_COUNTDOWN].includes(selectedTimer)) return `Counting to ${formatTime(stopTime)}`;\n        if (selectedTimer === T_TABATA) return `${mode} -  Round ${currentRound} of ${totalRounds}`;\n    }\n\n    return <TimerContext.Provider \n            value={{ \n                currentRound, setCurrentRound,\n                mode, setMode,\n                statusMessage, setStatusMessage, \n                timerCounting, toggleCounting, setTimerCounting,\n                counter, setCounter,\n                isFrontSide, toggleSide,\n                isComplete, setToComplete,\n                isTimerOver, startTimer, pauseTimer, resetTimer, initializeTimer, \n                exitTimer, completeTimer, messenger, \n                ...settingsContext\n\n            }}>\n            {children}\n        </TimerContext.Provider>;\n};\n\nexport default TimerProvider;","import { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport './Container.css';\n\nconst Container = memo((props) => {\n  const { children }  = props;\n  return <div className=\"container\">{children}</div>;\n});\n\n\nContainer.propTypes  = {\n  children: PropTypes.node\n}\n\nexport default Container;","import styled from \"styled-components\";\n\n\nconst Section = styled.div`\n  width: 90%;\n  margin: 2rem;\n  min-width: 35rem;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n  flex-direction: column;\n  margin-bottom: 10rem;\n\n`;\n\nconst Article = styled.div`\n  width: 100%;\n  height: 100%;\n  border-radius: 3rem;\n  box-shadow: 0.8rem 0.8rem 1.4rem var(--bgLight-2), -0.2rem -0.2rem 1.8rem var(--tint);\n  transition: transform 1s;\n  transform-style: preserve-3d;\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n  flex-direction: column;\n  padding: 2rem;\n`;\n\n\nconst Title = styled.div`\n  display: flex;\n  justify-content: center;\n  font-size: 2rem;\n`;\n\nconst RenderComponent = styled.div`\n  margin: 4rem 0;\n`;\n\nconst Documentation = styled.table``;\n\nconst DocumentComponent = ({title, component, propDocs}) => {\n  return (\n    <Section>\n          <Title>{title}</Title>\n          <RenderComponent>{component}</RenderComponent>\n          <Article>\n            <Documentation>\n              <tbody>\n              <tr key={1}>\n                <th>Prop</th>\n                <th>Description</th>\n                <th>Type</th>\n                <th>Default value</th>\n              </tr>\n              {propDocs.map((doc, index) => {\n                return (\n                  <tr key={index}>\n                    <td>{doc.prop}</td>\n                    <td>{doc.description}</td>\n                    <td>{doc.type}</td>\n                    <td>\n                      <code>{doc.defaultValue}</code>\n                    </td>\n                  </tr>\n                );\n              })}\n              </tbody>\n            </Documentation>\n          </Article>\n    </Section>\n  );\n}\n\nexport default DocumentComponent;\n","import { memo, useContext } from 'react';\nimport { TimerContext } from '../../../platform/TimerProvider';\nimport { Fragment } from 'react';\nimport './Tabs.css';\nimport PropTypes from 'prop-types';\nimport className from 'classnames';\n\nconst Tabs = memo(({ tabItems }) => {\n\n    const {selectedTimer, setSelectedTimer, setTimerCounting } = useContext(TimerContext);\n    \n    // select tab if included in tab list provided, otherwise select first item in tab list\n    const tabSelected  = tabItems.includes(selectedTimer)? selectedTimer : tabItems[0];\n\n    // Tab style\n    const tabStyle = [{\n        [`${selectedTimer.toLowerCase()}`]: true, \n    }];\n    \n    const handleChange =  (e) => {\n        const value = e.target.value || tabSelected;\n        setSelectedTimer(value);\n        setTimerCounting(false);\n    }\n\n    return  (\n        <div className=\"btn_bar\">\n            <div className=\"tab_control\">\n                { tabItems.length <= 4 && tabItems.map((tabItem, index) =>\n                    <Fragment key={index}>\n                        <input  type=\"radio\" \n                                name={\"radio\" + (index + 1)} \n                                value={tabItem} \n                                id={\"tab-\" + (index + 1)} \n                                checked={tabSelected === tabItem} \n                                onChange={handleChange}\n                        />\n                        <label htmlFor={\"tab-\" + (index + 1)} \n                                className={className(tabStyle, \"tab_control_\" + (index+1))}>\n                            <p>{tabItem}</p>\n                        </label>\n                    </Fragment>\n                )}\n                <div className=\"tab_control_color\"></div>\n            </div>\n        </div>\n    );\n});\n\n\nTabs.propTypes = {\n    tabItems: PropTypes.arrayOf(PropTypes.string).isRequired\n}\n\nexport default Tabs;","import { memo } from 'react';\nimport './Panel.css';\nimport PropTypes from 'prop-types';\n\nconst Panel =  memo((props) => {\n  const { id = \"\", children }  = props;\n\n  return (\n    <div className=\"panel\">\n        <div className=\"panel_inner\" id={id}>\n            {children}\n        </div>\n    </div>\n  );\n});\n\n\nPanel.propTypes  = {\n  id: PropTypes.string,\n  children: PropTypes.node\n}\n\nexport default Panel;","import styled from \"styled-components\";\nimport DocumentComponent from \"../components/documentation/DocumentComponent\";\nimport Display from \"../components/generic/Display/Display\";\nimport Button from \"../components/generic/Button/Button\";\nimport Input from \"../components/generic/Input/Input\";\nimport Tabs from \"../components/generic/Tabs/Tabs\";\nimport Card from \"../components/generic/Card/Card\";\nimport Panel from \"../components/generic/Panel/Panel\";\nimport { T_STOPWATCH, T_COUNTDOWN, T_XY, T_TABATA } from \"../utils/helpers\";\n\n\nconst Title = styled.div`\n  font-size: 2rem;\n`;\n\n\nconst Documentation = () => {\n\n\n  const flip = () => {\n    const card = document.querySelector(\"#testcard\");\n    if (card) card.classList.toggle('is-flipped');\n  }\n\n  return (\n    <>\n      <Title>Documentation</Title>\n\n      <DocumentComponent\n        title=\"Circular Display \"\n        component={<Display />}\n        propDocs={[\n          {\n            prop: \"timerCounting\",\n            description: \"Animates the circular display\",\n            type: \"bool\",\n            defaultValue: \"Registered in context. Optional. Default: false \",\n          },\n          {\n            prop: \"counter\",\n            description: \"Value to be displayed\",\n            type: \"string\",\n            defaultValue: \"Registered in context. Optional. Default: 00:00:00\",\n          },\n          {\n            prop: \"statusMessage\",\n            description: \"Status message that can be used for rounds/rest\",\n            type: \"string\",\n            defaultValue: \"Registered in context. Optional. Default: None\",\n          }\n        ]}\n      />    \n\n      <DocumentComponent\n        title=\"Button \"\n        component={<Button onClick={() => console.log(\"test\")}>Text Button</Button>}\n        propDocs={[\n          {\n            prop: \"id\",\n            description: \"Identifier for the button\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\",\n          },\n          {\n            prop: \"value\",\n            description: \"Identifier for the action useful to identify the event\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\"\n          },\n          {\n            prop: \"isIconButton\",\n            description: \"Creates an icon button\",\n            type: \"boolean\",\n            defaultValue: \"Optional. Default: false\"\n          },\n          {\n            prop: \"iconName\",\n            description: \"Name of the icon taken from ion icons. Applicable only when isIconButton is true\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\"\n          },\n          {\n            prop: \"iconVisible\",\n            description: \"Sets the visibility of the icon in an Icon Button. Applicable only when isIconButton is true\",\n            type: \"bool\",\n            defaultValue: \"Optional. Default: true\"\n          },\n          {\n            prop: \"classifiers\",\n            description: \"CSS classes to append additional styles\",\n            type:  \"string\",\n            defaultValue:  \"Optional. Default: 'btn_primary' for text buttons. Possible values for icon buttons: 'primary', 'secondary'\"\n          },\n          {\n            prop: \"onClick\",\n            description: \"Event handler for clicking on a button\",\n            type:  \"function\",\n            defaultValue:  \"Required. Default: None\"\n          },\n        ]}\n      />\n\n      <DocumentComponent\n        title=\"Button (with Icon configuration)\"\n        component={<Button \n          id = \"settings_btn\"\n          value=\"settings\"\n          classifiers = \"secondary\"\n          isIconButton = {true}\n          onClick={()=>console.log(\"icon button\")}\n          iconName=\"settings\"\n        />}\n        propDocs={[\n          {\n            prop: \"id\",\n            description: \"Identifier for the button\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\",\n          },\n          {\n            prop: \"value\",\n            description: \"Identifier for the action useful to identify the event\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\"\n          },\n          {\n            prop: \"isIconButton\",\n            description: \"Creates an icon button\",\n            type: \"boolean\",\n            defaultValue: \"Optional. Default: false\"\n          },\n          {\n            prop: \"iconName\",\n            description: \"Name of the icon taken from ion icons. Applicable only when isIconButton is true\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\"\n          },\n          {\n            prop: \"iconVisible\",\n            description: \"Sets the visibility of the icon in an Icon Button. Applicable only when isIconButton is true\",\n            type: \"bool\",\n            defaultValue: \"Optional. Default: true\"\n          },\n          {\n            prop: \"classifiers\",\n            description: \"CSS classes to append additional styles\",\n            type:  \"string\",\n            defaultValue:  \"Optional. Default: 'btn_primary' for text buttons. Possible values for icon buttons: 'primary', 'secondary'\"\n          },\n          {\n            prop: \"onClick\",\n            description: \"Event handler for clicking on a button\",\n            type:  \"function\",\n            defaultValue:  \"Required. Default: None\"\n          },\n        ]}\n      />\n\n      <DocumentComponent\n        title=\"Input \"\n        component={<Input label=\"Test Label\" value=\"\" />}\n        propDocs={[\n          {\n            prop: \"label\",\n            description: \"Label of the input field\",\n            type: \"String\",\n            defaultValue: \"Optional. Default: None\",\n          },\n          {\n            prop: \"value\",\n            description: \"Initial value passed to the input\",\n            type: \"String, Number or Date\",\n            defaultValue: \"Registered in context. Optional. Default: None\",\n          },\n          {\n            prop: \"placeholder\",\n            description: \"Input placeholder text\",\n            type: \"String\",\n            defaultValue: \"Optional. Default: None\",\n          },\n          {\n            prop: \"onChange\",\n            description: \"Event handler for capturing keyboard inputs\",\n            type:  \"function\",\n            defaultValue:  \"Optional. Default: None\"\n          },\n          {\n            prop: \"Other\",\n            description: \"All other HTML input attributes are supported\"\n          }\n\n\n        ]}\n      />    \n\n      <DocumentComponent\n        title=\"Tabs \"\n        component={<Tabs tabItems={[T_STOPWATCH, T_COUNTDOWN, T_XY, T_TABATA]} />}\n        propDocs={[\n          {\n            prop: \"tabItems\",\n            description: \"Array of tab labels. Max 4 tabs. If more, the control will not render\",\n            type: \"Array of strings\",\n            defaultValue: \"Optional. Default: []\",\n          },\n          {\n            prop: \"selectedTimer\",\n            description: \"Selected tab is registered in context\",\n            type: \"string\",\n            defaultValue: \"Registered in context. Optional. Default: None\",\n          }\n        ]}\n      />    \n\n      <DocumentComponent\n        title=\"Card \"\n        component={\n          <Panel id=\"testcard\">\n            <Card side=\"front\">\n              front side\n              <Button onClick={flip}>Flip</Button>\n            </Card>\n            <Card side=\"back\">\n              back side\n              <Button onClick={flip}>Flip Again</Button>\n            </Card>\n          </Panel>}\n        propDocs={[\n          {\n            prop: \"side\",\n            description: `Card container that flips using css. \n            Two Cards (front and back) need to be defined in order for flipping to work`,\n            type: \"string\",\n            defaultValue: \"Optional. Default: 'front'. Possible values: 'front' |  'back'\",\n          },\n          {\n            prop: \"Children Nodes\",\n            description: `Accepts any React and HTML valid nodes. \n            An event within a child element of the card could trigger the flipping.\n            The event handler should query the id of Panel container and apply toggle('is-flipped') to\n            the queried element`,\n            type: \"node\",\n            defaultValue: \"Optional. Default: None\",\n          }\n        ]}\n      /> \n\n      <DocumentComponent\n        title=\"Panel \"\n        component={<Panel >Content goes here</Panel>}\n        propDocs={[\n          {\n            prop: \"id\",\n            description: \"Identifier for the panel that will allow flipping the cards\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\",\n          },\n          {\n            prop: \"Children Nodes\",\n            description: \"Accepts any React and HTML valid nodes\",\n            type: \"node\",\n            defaultValue: \"Optional. Default: None\",\n          }\n        ]}\n      />\n\n      <DocumentComponent\n        title=\"Container \"\n        component=\"Generic Empty Container\"\n        propDocs={[\n          {\n            prop: \"Children Nodes\",\n            description: \"Accepts any React and HTML valid nodes\",\n            type: \"node\",\n            defaultValue: \"Optional. Default: None\",\n          }\n        ]}\n      />           \n\n\n    </>\n  );\n\n}\n\nexport default Documentation;\n","import { useContext, useEffect} from 'react';\nimport { TimerContext } from '../platform/TimerProvider';\nimport Panel from \"../components/generic/Panel/Panel\";\nimport Button from \"../components/generic/Button/Button\";\n\nconst TimersView = () => {\n\n  const { workouts, selectedTimer, setSelectedTimer, currentWorkout, hasNext, isEmpty, calculateTotalWorkout, getWorkoutProperty } = useContext(TimerContext);\n\n  useEffect(() => {\n    if (hasNext())\n        setSelectedTimer(workouts[currentWorkout].type);\n  }, [currentWorkout, workouts, hasNext, setSelectedTimer]); \n\n \n  const redirect = () => window.location.href = (\"/add\");\n\n  return (\n    <>\n      <div>\n        <div>Total Workouts: {workouts.length}</div>\n        <div>Total Workouts Duration: {calculateTotalWorkout()} seconds</div>\n        {!isEmpty() && <div>Current Workout: {getWorkoutProperty(hasNext()? currentWorkout : currentWorkout - 1, 'title')} - {selectedTimer}</div>}\n      </div>\n      <Panel id=\"timer_panel\">\n        {isEmpty()? (\n          <>\n            <img src={process.env.PUBLIC_URL + '/fitness.png'} alt=\"No Workouts found\"/>\n            <Button \n              onClick={redirect}\n              buttonTheme={selectedTimer}>\n                Add a workout\n              </Button>\n          </>\n        ) : (\n         hasNext()? (workouts[currentWorkout].C) : (workouts[currentWorkout-1].C)\n        )}\n      </Panel>\n    </>\n\n  );\n\n}\n\n\nexport default TimersView;\n","// import { useContext, useEffect} from 'react';\n// import { TimerContext } from '../platform/TimerProvider';\n// import Panel from \"../components/generic/Panel/Panel\";\n// import Button from \"../components/generic/Button/Button\";\n\nconst AddView = () => {\n\n \n  return (\n    <>\n        <div>hello</div>\n    </>\n\n  );\n\n}\n\n\nexport default AddView;\n","import React from \"react\";\nimport TimerProvider from './platform/TimerProvider';\nimport SettingsProvider from \"./platform/SettingsProvider\";\nimport WorkoutSettingsProvider from \"./platform/WorkoutSettingsProvider\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Container from \"./components/generic/Container/Container\";\nimport DocumentationView from \"./views/DocumentationView\";\nimport TimersView from \"./views/TimersView\";\nimport AddView from \"./views/AddView\";\n\n\nconst App = () => {\n\n  return (\n      <Router>\n        <WorkoutSettingsProvider>\n        <SettingsProvider>\n            <TimerProvider>\n            <nav className=\"navigation\">\n                <ul>\n                  <li key={1}>\n                    <Link to=\"/\">Workouts</Link>\n                  </li>\n                  <li key={2}>\n                    <Link to=\"/docs\">Documentation</Link>\n                  </li>\n                  <li key={3}>\n                    <Link to=\"/add\">Add</Link>\n                  </li>\n                </ul>\n              </nav>\n              <br />\n              <Container>\n                <Switch>\n                    <Route path=\"/docs\">\n                      <DocumentationView />\n                    </Route>\n                    <Route path=\"/add\">\n                      <AddView />\n                    </Route>\n                    <Route path=\"/\">\n                      <TimersView />\n                    </Route>\n                  </Switch>\n              </Container>\n              </TimerProvider>\n          </SettingsProvider>\n        </WorkoutSettingsProvider>\n      </Router>\n  );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}